pipeline {
  agent {label 'dtjenkinsslave'}
  //Generates Parameters for Jenkins Job
  //parameters {
  //string defaultValue: '', description: '', name: 'api_type'
  //choice choices: ['appointment', 'article', 'communication', 'customer', 'fitment', 'inventory', 'order', 'payment', 'recommendations', 'store', 'tire', 'vehicle', 'vehicle-inspection', 'vehicle-search', 'vtvactivity', 'vendor-inventory'], description: '', name: 'service_name'
  //choice choices: ['dev', 'qa', 'stg', 'prd'], description: '', name: 'environment'
  //string defaultValue: '', description: '', name: 'environment', trim: false
  // string defaultValue: '', description: '', name: 'repo_tag', trim: false
  // string defaultValue: '1', description: '', name: 'api_version', trim: false
  // string defaultValue: '', description: '', name: 'stack_name', trim: false
  //string defaultValue: 'apigateway', description: '', name: 'aws_profile', trim: false
  //string defaultValue: '', description: '', name: 'service_name', trim: false
  //string defaultValue: '', description: '', name: 'ChildIssue', trim: false
  //string defaultValue: 'apigateway', description: '', name: 'jobType', trim:false
  //string defaultValue: 'discounttire_apigateway', description: '', name: 'TEAM', trim: false
  //string defaultValue: 'api.bitbucket.org', description: '', name: 'bitbucketHost', trim:false
  //string defaultValue: '', description: '', name: 'issue', trim: false


  //Set by polling job
  //string defaultValue: '', description: 'Please Insert Related Jira Story', name: 'issue', trim: false
 // }
  
  //triggers {pollSCM '*/5 * * * *'} 
  stages {
    stage('Prep') {
      steps { 
        script {
          LastStage = 'Prep'
          dtc_env = "${environment}"
          if ("${BUILD_NUMBER}" == '1') {
            if ("${environment}".contains('dev')) {
              currentBuild.result = 'ABORTED'
              error('First Run - Ending Build - If being executes manually run second time')
              echo "${$BUILD_NUMBER}" 
              }
            }
          }  
          echo "${jobType}"    
        script {
          if ("${environment}".contains('dev')) {
            mergeMaster = 'False'
            relBranchCreate = 'False'
            repoCheck = 'True'
            branch = 'develop'
            ChildIssue = '0'
          } 
        }      
        script {
          if ("${environment}".contains('qa')) {
            mergeMaster = 'False'
            relBranchCreate = 'True'
            repoCheck = 'True'
            branch = 'develop'
          }
        }  
        script {
          if ("${environment}".contains('stg')) {
            mergeMaster = 'False'
            relBranchCreate = 'False'
            copyArtifacts filter: 'cloudformation/*, code/*, common/*', fingerprintArtifacts: true, projectName: '${service_name}--apigateway-deploy-qa', selector: lastSuccessful()
            archiveArtifacts 'cloudformation/*, code/*, common/*'
            stash includes: 'cloudformation/*', name: 'cloudformation'
            stash includes: 'code/*', name: 'code'
            stash includes: 'common/*', name: 'common'
          }
        }  
        script {
          if ("${environment}".contains('prod')) {
            mergeMaster = 'False'
            relBranchCreate = 'False'
            copyArtifacts filter: 'cloudformation/*, code/*, common/*', fingerprintArtifacts: true, projectName: '${service_name}--apigateway-deploy-stg', selector: lastSuccessful()
            archiveArtifacts 'cloudformation/*, code/*, common/*'
            stash includes: 'cloudformation/*', name: 'cloudformation'
            stash includes: 'code/*', name: 'code'
            stash includes: 'common/*', name: 'common'
          }
        }  
        script {
          if ("${environment}".contains('Master')) {
            mergeMaster = 'True'
            copyArtifacts filter: 'cloudformation/*, code/*, common/*', fingerprintArtifacts: true, projectName: '${service_name}--apigateway-deploy-prod', selector: lastSuccessful()
          } 
        }
      }
    }
    stage('Repository Checkout') {      
      when {
        expression { repoCheck == 'True' }
      }
      steps {
        script {
      LastStage = 'Repository Checkout'
          dir('cloudformation') {
            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: 'cloudformation']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-bitbucket', url: 'git@bitbucket.org:discounttire_apigateway/dt-apigateway-cf.git']]]
          }
          
          dir('code') {
            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/develop"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: 'code']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-bitbucket', url: 'git@bitbucket.org:discounttire_apigateway/${service_name}.git']]]
          }
          
          dir('common') {
            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: 'common']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-bitbucket', url: 'git@bitbucket.org:discounttire_apigateway/dt-apigateway-common.git']]]
          }
          stash includes: 'cloudformation/*', name: 'cloudformation'
          stash includes: 'code/*', name: 'code'
          stash includes: 'common/*', name: 'common'
          archiveArtifacts 'cloudformation/*, code/*, common/*'
        }
        script {
          author = sh ( 
            script: 'cd code && git log | grep -m 1 Author | awk -F " " \'{print $2}\'',
              returnStdout: true
          ).trim()
        }
        echo "${author}"
                
        script {
          issue = sh ( 
            script: 'cd code && git log | grep -m 1 feature | awk -F "/" \'{ print $3}\' | awk -F " " \'{ print $1}\' | awk -F "-" \'BEGIN { OFS = "-" } { print $1,$2 }\'',
            returnStdout: true
          ).trim()
        }
        echo "${issue}"
        script {
          project = sh ( 
            script: 'cd code && git log | grep -m 1 feature | awk -F "/" \'{ print $3}\' | awk -F " " \'{ print $1}\' | awk -F "-" \'BEGIN { OFS = "-" } { print $1 }\'',
              returnStdout: true
          ).trim()
        }
        echo "${project}"
      }
    }   
    stage('Get API Version') {
     steps {
      script {
        apiGatewayVersion = readFile 'code/version.txt'
      }
      echo "${apiGatewayVersion}"
      echo "${project}"
      }
    }
    stage('Create Release Branch') {
      when {
        expression { relBranchCreate == 'True' }
      }
      steps {
        script {
          LastStage = 'Create Release Branch - Bitbucket'
          cleanWs()
          git changelog: false, poll: false, branch: "${branch}", credentialsId: 'jenkins-bitbucket', url: 'git@bitbucket.org:discounttire_apigateway/${service_name}.git'                                
          withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-bitbucket', keyFileVariable: 'GITHUB_KEY')]) {
            withEnv(["GIT_SSH_COMMAND=ssh -i $GITHUB_KEY -o StrictHostKeyChecking=no"]) {
              sh "git push git@bitbucket.org:discounttire_apigateway/${service_name}.git HEAD:release/${apiGatewayVersion}"
            }
          }                   
        }
      }
    }
    stage('Set SAML') {
      steps {
        script {
          LastStage = 'Set SAML'
        unstash 'cloudformation'
        unstash 'code'
        unstash 'common'
        echo 'hello'
          sh label: '', script: "chmod +x $WORKSPACE/cloudformation/setsaml.sh"        
          sh label: '', script: "$WORKSPACE/cloudformation/setsaml.sh"
        }
      }
    }
    stage('Deploy') {
      steps {
        script {
          LastStage = 'Deploy'
          echo 'hello'
          unstash 'cloudformation'
          unstash 'code'
          unstash 'common'
          sh label: '', script: "chmod +x $WORKSPACE/cloudformation/deploy.sh"        
          sh label: '', script: "$WORKSPACE/cloudformation/deploy.sh $environment"
        }
      }
    }
    stage('Merge To Master') {
      when {
        expression { mergeMaster == 'True' }
      }
      steps {
        script {
          LastStage = 'Merge To Master'
          cleanWs()
          git changelog: false, poll: false, branch: "release/${version}", credentialsId: 'jenkins-bitbucket', url: 'git@bitbucket.org:discounttire_apigateway/${service_name}.git'                                
          withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-bitbucket', keyFileVariable: 'GITHUB_KEY')]) {
          withEnv(["GIT_SSH_COMMAND=ssh -i $GITHUB_KEY -o StrictHostKeyChecking=no"]) {                        
            //sh "git tag -l ${version}"
            sh "git tag $apiGatewayVersion"
            sh "git push --tag"
            sh "git push git@bitbucket.org:discounttire_apigateway/${service_name}.git HEAD:develop"
            sh "git push git@bitbucket.org:discounttire_apigateway/${service_name}.git HEAD:master"                                
            build job: 'JIRA/Jira-Issue-Create', parameters: [string(name: 'jiraIssue', value: "$issue"), string(name: 'jiraEnv', value: "$environment"), string(name: 'jiraRepo', value: "$service_name"), string(name: 'jiraProject', value: "$project")]
          }
          withCredentials([
            string(credentialsId: 'jenkins-bitbucket-api-creds', variable: 'bitbucketCredentials')]) {
              def createRepo = sh(
                label: 'Create Repository',
                script: """curl --request DELETE --url https://${bitbucketHost}/2.0/repositories/${TEAM}/${service_name}/refs/branches/release/${apiGatewayVersion} \
                  --header 'Accept: */*' \
                  --header 'Accept-Encoding: gzip, deflate' \
                  --header 'Authorization: Basic ${bitbucketCredentials}' \
                  --header 'Cache-Control: no-cache' \
                  --header 'Connection: keep-alive' \
                  --header 'Content-Length: 40' \
                  --header 'Content-Type: application/json' \
                  --header 'Host: ${bitbucketHost}' \
                  --data '{\n	"is_private": "True",\n	"scm": "git"\n}'""",
                returnStdout: true
              )
              if (createRepo.contains("error")){
                print createRepo
                currentBuild.result = 'FAILURE'
              }
            }
          }
        }
      }
    }
  }  

  post {
    always {
      echo 'This will always run'
      //sh label: '', script: "sleep 6000"        

    }
    success {
      echo 'This will run only if successful'
      build job: 'JIRA/Jira-Issue-Comment', parameters: [string(name: 'jiraHost', value: 'discounttire.atlassian.net'), string(name: 'apiRev', value: 'latest'), string(name: 'jiraIssue', value: "$issue"), string(name: 'comment', value: "Completed--Service-$service_name--Environment Deployed-$dtc_env"), string(name: 'jobLink', value: "$BUILD_URL"), string(name: 'jobName', value: "$JOB_NAME")]
      build job: 'JIRA/Jira-Issue-Comment', parameters: [string(name: 'jiraHost', value: 'discounttire.atlassian.net'), string(name: 'apiRev', value: 'latest'), string(name: 'jiraIssue', value: "$ChildIssue"), string(name: 'comment', value: "Completed--Service-$service_name--Environment Deployed-$dtc_env"), string(name: 'jobLink', value: "$BUILD_URL"), string(name: 'jobName', value: "$JOB_NAME")]
      build job: 'JIRA/Jira-Issue-Create', parameters: [string(name: 'jiraIssue', value: "$issue"), string(name: 'jiraEnv', value: "$environment"), string(name: 'jiraRepo', value: "$service_name"), string(name: 'jiraProject', value: "$project"), string(name: 'jobType', value: "$jobType")]
     }
    failure {
      echo 'This will run only if failed'
      build job: 'JIRA/Jira-Issue-Comment', parameters: [string(name: 'jiraHost', value: 'discounttire.atlassian.net'), string(name: 'apiRev', value: 'latest'), string(name: 'JiraIssue', value: "$issue"), string(name: 'Comment', value: "$environment-$LastStage"), string(name: 'JobLink', value: "$BUILD_URL"), string(name: 'JobName', value: "$JOB_NAME")]
      build job: 'JIRA/Jira-Issue-Comment', parameters: [string(name: 'jiraHost', value: 'discounttire.atlassian.net'), string(name: 'apiRev', value: 'latest'), string(name: 'JiraIssue', value: "$ChildIssue"), string(name: 'Comment', value: "$environment-$LastStage"), string(name: 'JobLink', value: "$BUILD_URL"), string(name: 'JobName', value: "$JOB_NAME")]
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}
